<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Contact Form</title>
</head>

<body>
<!--
  Right column: "Let's work together" text + form stacked.
-->
<div>
  <div class="max-w-2xl px-4 sm:px-6 lg:px-8 space-y-6">
    <!-- Intro text above the form -->
    <h2 class="text-3xl font-medium tracking-tight sm:text-4xl">Let's work together</h2>
    <p class="text-primary-950/70 dark:text-primary-200/70 max-w-lg text-lg sm:text-xl">
      We'd love to learn more about you and what we can build together.
    </p>

    <!-- Contact Form -->
    <form
      id="contact-form"
      class="flex flex-col gap-y-6"
      novalidate
    >
      <!-- Full name input -->
      <div>
        <label for="full-name" class="sr-only">Full name</label>
        <input
          type="text"
          name="name"
          id="full-name"
          autocomplete="name"
          class="hover:ring-primary-600 focus:ring-primary-600 dark:hover:ring-primary-400 dark:focus:ring-primary-400 bg-primary-50 dark:bg-primary-950 ring-primary-900/40 dark:ring-primary-200/40 placeholder:text-primary-950/60 dark:placeholder:text-primary-200/60 block w-full appearance-none rounded-md border-0 px-4 py-4 text-base ring-1 transition focus:outline-none focus:ring-2"
          placeholder="Full name"
          required
        />
      </div>

      <!-- Email input -->
      <div>
        <label for="email" class="sr-only">Email</label>
        <input
          type="email"
          name="email"
          id="email"
          autocomplete="email"
          class="hover:ring-primary-600 focus:ring-primary-600 dark:hover:ring-primary-400 dark:focus:ring-primary-400 bg-primary-50 dark:bg-primary-950 ring-primary-900/40 dark:ring-primary-200/40 placeholder:text-primary-950/60 dark:placeholder:text-primary-200/60 block w-full appearance-none rounded-md border-0 px-4 py-4 text-base ring-1 transition focus:outline-none focus:ring-2"
          placeholder="Email"
          required
        />
      </div>

      <!-- Message textarea -->
      <div>
        <label for="message" class="sr-only">Message</label>
        <textarea
          name="message"
          id="message"
          rows="3"
          class="hover:ring-primary-600 focus:ring-primary-600 dark:hover:ring-primary-400 dark:focus:ring-primary-400 bg-primary-50 dark:bg-primary-950 ring-primary-900/40 dark:ring-primary-200/40 placeholder:text-primary-950/60 dark:placeholder:text-primary-200/60 block w-full appearance-none rounded-md border-0 px-4 py-4 text-base ring-1 transition focus:outline-none focus:ring-2"
          placeholder="Message"
          required
        ></textarea>
      </div>

      <!-- Submit button -->
      <div>
        <button
          class="bg-primary-600 dark:bg-primary-400 hover:bg-primary-700 dark:hover:bg-primary-300 focus-visible:outline-primary-600 dark:focus-visible:outline-primary-400 dark:text-primary-950 inline-flex items-center justify-center rounded-full border border-transparent px-5 py-3 text-base font-medium text-white transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2"
          type="submit"
        >
          Submit
        </button>
      </div>
    </form>

    <!-- Success Message -->
    <div id="form-success" class="hidden mt-4 text-center text-green-600 text-lg font-medium">
      Thank you! Your message has been successfully sent.
    </div>

    <!-- Error Message -->
    <div id="form-error" class="hidden mt-4 text-center text-red-600 text-lg font-medium">
      Error submitting form. Please try again.
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Type-safe element selection
      const form = document.getElementById('contact-form') as HTMLFormElement;
      const successMessage = document.getElementById('form-success');
      const errorMessage = document.getElementById('form-error');
      const submitBtn = form.querySelector('button[type="submit"]');

      async function handleSubmit(e) {
        e.preventDefault();
        errorMessage?.classList.add('hidden');

        try {
          // Validate form first
          if (!form.checkValidity()) {
            form.reportValidity();
            return;
          }

          // Show loading state
          submitBtn.disabled = true;
          submitBtn.textContent = 'Sending...';

          // Formspree AJAX endpoint with required headers
          const response = await fetch('https://formspree.io/f/xzzdalbo', {
            method: 'POST',
            body: new FormData(form),
            headers: {
              'Accept': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            }
          });

          // Handle HTTP errors
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }

          const data = await response.json();

          // Fix: Use 'data.ok' instead of 'data.success'
          if (!data.ok) {
            const errorList = data.errors?.map((err) => err.message) || ['Submission failed'];
            throw new Error(errorList.join(', '));
          }

          // Success handling
          form.reset();
          successMessage?.classList.remove('hidden');
          setTimeout(() => {
            successMessage?.classList.add('hidden');
          }, 5000);

        } catch (error) {
          console.error('Submission error:', error);
          if (errorMessage) {
            errorMessage.textContent = `Error: ${error instanceof Error ? error.message : 'Unknown error'}`;
            errorMessage.classList.remove('hidden');
          }
        } finally {
          // Reset button state
          submitBtn.disabled = false;
          submitBtn.textContent = 'Submit';
        }
      }

      form.addEventListener('submit', handleSubmit);
    });
  </script>
</div>
</body>
</html>
